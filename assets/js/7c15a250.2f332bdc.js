"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8029],{6716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"support-mod-types/Network/create-a-network-mod","title":"Create a network mod","description":"Note: The prefixes used in the tutorial are \\"WMD\\\\\\", which can be replaced with your own prefix, and you will need to change the prefix in the AddressableConfig(Assets/Resources/AddressableConfig) file. Once you have changed the prefix, you will need to fill in your new prefix instead of \\"WMD\\\\\\" in the tutorial.","source":"@site/docs/support-mod-types/7.Network/15.create-a-network-mod.mdx","sourceDirName":"support-mod-types/7.Network","slug":"/support-mod-types/Network/create-a-network-mod","permalink":"/community-docs/docs/support-mod-types/Network/create-a-network-mod","draft":false,"unlisted":false,"editUrl":"https://github.com/BattleTalent/community-docs/docs/support-mod-types/7.Network/15.create-a-network-mod.mdx","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{},"sidebar":"docs","previous":{"title":"Avatar Clothing","permalink":"/community-docs/docs/support-mod-types/Avatar/Tutorials/avatar-clothing"},"next":{"title":"Introduction","permalink":"/community-docs/docs/LuaScript/Introduction"}}');var o=t(4848),i=t(8453);const c={},s="Create a network mod",l={},a=[{value:"Introduction:",id:"introduction",level:4},{value:"1.Script",id:"1script",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.RP)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"create-a-network-mod",children:"Create a network mod"})}),"\n",(0,o.jsx)(n.p,{children:'Note: The prefixes used in the tutorial are "WMD_", which can be replaced with your own prefix, and you will need to change the prefix in the AddressableConfig(Assets/Resources/AddressableConfig) file. Once you have changed the prefix, you will need to fill in your new prefix instead of "WMD_" in the tutorial.'}),"\n",(0,o.jsx)(n.h2,{id:""}),"\n",(0,o.jsx)(n.p,{children:"note: The game host is the server, basically all changes are processed on the server and synchronised to the client."}),"\n",(0,o.jsx)(n.p,{children:"The only difference between a network mod and a normal mod is the script and configuration, so let's use the gun mod as an example of a modification."}),"\n",(0,o.jsx)(n.h4,{id:"introduction",children:"Introduction:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"RPC: The server uses a Remote Procedure Call (RPC) to run this function on clients"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"CMD: Call this from a client to run this function on the server"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"netId: The unique network Id of this object"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["When making a multiplayer mod, we will use ",(0,o.jsx)(n.code,{children:"NetworkStateX"})," to receive data, send data and synchronize data. By injecting Function into NetworkStateX in a lua script, we can use the RPC and CMD interfaces to transfer data, and we can also use the SetState and GetState interfaces provided to synchronize data from the server to all clients."]}),"\n",(0,o.jsx)(n.p,{children:"Different types of NetworkStateX:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["FlyObject : ",(0,o.jsx)(n.code,{children:"NetworkFlyObjectStateX"})]}),"\n",(0,o.jsxs)(n.li,{children:["InteractBase: ",(0,o.jsx)(n.code,{children:"NetworkIBStateX"})]}),"\n",(0,o.jsxs)(n.li,{children:["SceneObj: ",(0,o.jsx)(n.code,{children:"NetworkSceneObjStateX"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"\u200b\tYou can open the NetworkStateX file in ModToolKit to see more interfaces."}),"\n",(0,o.jsx)(n.h4,{id:"1script",children:"1.Script"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"RPC - Server to Client"}),"\n",(0,o.jsx)(n.p,{children:"The server calls the client function using Remote Procedure Call (RPC)."}),"\n",(0,o.jsx)(n.p,{children:"A function that needs to be called on the client:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"function WeaponFlyObj:RpcOnShoot(bullet)\r\n    --client to do\r\nend\n"})}),"\n",(0,o.jsx)(n.p,{children:"Registering Function in NetworkInject so that the client can find the same function and run it when the server calls it."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'function WeaponFlyObj:NetworkInject()\r\n    self.host.interact.networkIB.networkIBState:InjectFunc("RpcOnShoot", self.RpcOnShoot)\r\n    --inject other function\r\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The server uses the interface ",(0,o.jsx)(n.code,{children:"ServerRpcIntFunc"})," (Please read ",(0,o.jsx)(n.code,{children:"NetworkIBStateX"})," for more interfaces) in networkIBState to call functions in the client. (RpcOnShoot)."]}),"\n",(0,o.jsxs)(n.p,{children:["\u200b\tother interface refer to ",(0,o.jsx)(n.code,{children:"NetworkIBStateX"})]}),"\n",(0,o.jsx)(n.p,{children:"ServerRpcIntFunc(funtionName, int, includeServer)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"functionName: The name of the function to be called on the client"}),"\n",(0,o.jsx)(n.li,{children:"int:  int value"}),"\n",(0,o.jsx)(n.li,{children:"includeServer: run this function on the server as well\uff0cIn this case, includeServer is false, so it will only run RpcOnShoot on the client side."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'function WeaponFlyObj:ServerOnShoot(bullet)\r\n    self.host.interact.networkIB.networkIBState:ServerRpcIntFunc("RpcOnShoot", bullet.netId, false)\r\nend\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"CMD - Client to Server"}),"\n",(0,o.jsx)(n.p,{children:"The client calls the server function using Command(CMD). In general, there are very few cases where the client calls the server function."}),"\n",(0,o.jsx)(n.p,{children:"\u200b"}),"\n",(0,o.jsx)(n.p,{children:"Similarly, complete the function and register"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'function WeaponFlyObj:NetworkInject()\r\n    self.host.interact.networkIB.networkIBState:InjectFunc("CmdToShoot", self.CmdToShoot)\r\n    --inject other function\r\nend\r\n\r\nfunction WeaponFlyObj:CmdToShoot()\r\n    --Server shoot\r\nend\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The client uses the interface ",(0,o.jsx)(n.code,{children:"CommandFunc"})," (Please read ",(0,o.jsx)(n.code,{children:"NetworkIBStateX"})," for more interfaces) in networkIBState to call function (CmdToShoot) in the server."]}),"\n",(0,o.jsx)(n.p,{children:"CommandFunc(funtionName)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"functionName: Name of the function to call on the server"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'function WeaponFlyObj:ClientToShoot()\r\n    self.host.interact.networkIB.networkIBState:CommandFunc("CmdToShoot", null, null, null, null)\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"end"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\r\n\r\n\r\n\r\n3. NetworkState - state synchronization\r\n\r\nWe can use NetworkState for data synchronization, which currently only supports server synchronization of data to all clients.\r\n\r\n\r\n\r\nSimilarly, complete the function and register\r\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["function Test",":Awake","()"]}),"\n",(0,o.jsx)(n.p,{children:"--The client updates the value upon receipt.\r\nself.onValueChange = function(value)\r\nself.value = value\r\nend\r\nend"}),"\n",(0,o.jsxs)(n.p,{children:["function Test",":NetworkInject","()\r\nself.host.interact.networkIB.networkIBState",":InjectIntState",'("value", self.onValueChange)\r\n--inject other function\r\nend']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\r\nThe server updates the value using `SetIntStateValue` (Please read `NetworkIBStateX` for more interfaces).\r\n\n"})}),"\n",(0,o.jsxs)(n.p,{children:["function Test",":ServerUpdateValue","()\r\nif CL.Network.VRNetworkManager.ServerOnline then\r\nself.host.interact.networkIB.networkIBState",":SetVec3StateValue",'("value", self.value)\r\nend\r\nend']}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\r\n\r\n\r\n#### 2.Config\r\n\r\n* Check Supported Multiplayer to display it in multiplayer mode.\r\n![PlaceModel](15.create-a-network-mod/MutiCheckbox.png)\r\n\r\n\r\n\r\n* Click AutoRegisterNetworkPrefab, to register the prefabs that need to be used in multiplayer mode, such as FlyObject.\r\n![PlaceModel](15.create-a-network-mod/regNetworkPrefab.png)\r\n\r\n\r\n\r\n\r\n\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.RP)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{RP:()=>i,xA:()=>s});var r=t(6540);const o=r.createContext({});function i(e){const n=r.useContext(o);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const c={};function s({components:e,children:n,disableParentContext:t}){let s;return s=t?"function"==typeof e?e({}):e||c:i(e),r.createElement(o.Provider,{value:s},n)}}}]);