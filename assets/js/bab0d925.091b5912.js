"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7600],{1005:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"LuaScript/Reference by category/Network/NetworkState","title":"NetworkState - state synchronization","description":"We can use NetworkState for data synchronization, which currently only supports server synchronization of data to all clients.","source":"@site/docs/LuaScript/4.Reference by category/9.Network/3.NetworkState.md","sourceDirName":"LuaScript/4.Reference by category/9.Network","slug":"/LuaScript/Reference by category/Network/NetworkState","permalink":"/community-docs/docs/LuaScript/Reference by category/Network/NetworkState","draft":false,"unlisted":false,"editUrl":"https://github.com/BattleTalent/community-docs/docs/LuaScript/4.Reference by category/9.Network/3.NetworkState.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"docs","previous":{"title":"CMD - Client to Server","permalink":"/community-docs/docs/LuaScript/Reference by category/Network/CMD"},"next":{"title":"InputDetection","permalink":"/community-docs/docs/LuaScript/Reference by category/Input/snippet-input-detection"}}');var o=n(4848),c=n(8453);const a={},s="NetworkState - state synchronization",i={},l=[];function u(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.RP)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"networkstate---state-synchronization",children:"NetworkState - state synchronization"})}),"\n",(0,o.jsx)(t.p,{children:"We can use NetworkState for data synchronization, which currently only supports server synchronization of data to all clients."}),"\n",(0,o.jsx)(t.p,{children:"Similarly, complete the function and register"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'function Test:Awake()\n\t\n\t--The client updates the value upon receipt.\n    self.onValueChange = function(value)\n        self.value = value\n    end\nend\n\nfunction Test:NetworkInject()\n    self.host.interact.networkIB.networkIBState:InjectIntState("value", self.onValueChange)\n    --inject other function\nend\n'})}),"\n",(0,o.jsxs)(t.p,{children:["The server updates the value using ",(0,o.jsx)(t.code,{children:"SetIntStateValue"})," (Please read ",(0,o.jsx)(t.code,{children:"NetworkIBStateX"})," for more interfaces)."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{children:'function Test:ServerUpdateValue()\n\tif CL.Network.VRNetworkManager.ServerOnline then\n\t\tself.host.interact.networkIB.networkIBState:SetVec3StateValue("value", self.value)\n\tend\nend\n'})})]})}function d(e={}){const{wrapper:t}={...(0,c.RP)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,t,n)=>{n.d(t,{RP:()=>c,xA:()=>s});var r=n(6540);const o=r.createContext({});function c(e){const t=r.useContext(o);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const a={};function s({components:e,children:t,disableParentContext:n}){let s;return s=n?"function"==typeof e?e({}):e||a:c(e),r.createElement(o.Provider,{value:s},t)}}}]);