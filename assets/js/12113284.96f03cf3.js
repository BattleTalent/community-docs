"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[839],{5361:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"support-mod-types/Weapon/ImportantComponent/FlyObject","title":"FlyObject / FlyObjectX","description":"Overview","source":"@site/docs/support-mod-types/1.Weapon/2.ImportantComponent/FlyObject.mdx","sourceDirName":"support-mod-types/1.Weapon/2.ImportantComponent","slug":"/support-mod-types/Weapon/ImportantComponent/FlyObject","permalink":"/community-docs/docs/support-mod-types/Weapon/ImportantComponent/FlyObject","draft":false,"unlisted":false,"editUrl":"https://github.com/BattleTalent/community-docs/docs/support-mod-types/1.Weapon/2.ImportantComponent/FlyObject.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Enchantment Spell","permalink":"/community-docs/docs/support-mod-types/Weapon/Tutorials/enchantment-spell"},"next":{"title":"InteractTrigger / InteractTriggerX","permalink":"/community-docs/docs/support-mod-types/Weapon/ImportantComponent/InteractTrigger"}}');var l=n(4848),s=n(8453);const o={},r="FlyObject / FlyObjectX",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Life Cycle",id:"life-cycle",level:2},{value:"Flight Mechanics",id:"flight-mechanics",level:2},{value:"Collision Configuration",id:"collision-configuration",level:2},{value:"Collision Event Handlers",id:"collision-event-handlers",level:2}];function a(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.RP)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"flyobject--flyobjectx",children:"FlyObject / FlyObjectX"})}),"\n",(0,l.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(t.p,{children:"FlyObject is a component designed to simulate objects with independent trajectories and short life cycles, such as fireballs and bullets. FlyObjectX extends the base FlyObject class by adding scripting capabilities through Lua."}),"\n",(0,l.jsx)(t.h2,{id:"life-cycle",children:"Life Cycle"}),"\n",(0,l.jsxs)(t.p,{children:["The following diagram illustrates the complete life cycle of a ",(0,l.jsx)(t.strong,{children:"FlyObject"})," from spawn to termination:"]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"FlyObjLifeCycle",src:n(6376).A+"",width:"1174",height:"154"})}),"\n",(0,l.jsx)(t.h2,{id:"flight-mechanics",children:"Flight Mechanics"}),"\n",(0,l.jsx)(t.p,{children:"During flight state, FlyObject can:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"Generate and manage particle trails"}),"\n",(0,l.jsx)(t.li,{children:"Track and update trajectory paths"}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["The object will transition from flight to stopped state once the collision count reaches the configured ",(0,l.jsx)(t.code,{children:"collisionFlyCount"})," value."]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"FlyState",src:n(8742).A+"",width:"894",height:"154"})}),"\n",(0,l.jsx)(t.h2,{id:"collision-configuration",children:"Collision Configuration"}),"\n",(0,l.jsx)(t.p,{children:"FlyObject provides flexible collision filtering options:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"ignoreDamageList"}),": Specify object types to ignore during collision detection"]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"ignoreHolder"}),": Option to ignore collisions with the entity that spawned this FlyObject"]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"collision-event-handlers",children:"Collision Event Handlers"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Important"}),": Collision events will override the default Lua functions. To maintain proper life cycle management, you must manually call ",(0,l.jsx)(t.code,{children:"OnCollisionUpdate()"})," in your handlers. See ",(0,l.jsx)(t.code,{children:"FlySpellBaseScript.txt"})," for implementation examples."]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{children:"Target Type"}),(0,l.jsx)(t.th,{children:"Collision Handler"}),(0,l.jsx)(t.th,{children:"Trigger Handler"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"PlayerHand"}),(0,l.jsx)(t.td,{children:"OnCollisionWithPlayerHand"}),(0,l.jsx)(t.td,{children:"OnTriggerWithPlayerHand"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Player"}),(0,l.jsx)(t.td,{children:"OnCollisionWithPlayer"}),(0,l.jsx)(t.td,{children:"OnTriggerWithPlayer"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"HitScan"}),(0,l.jsx)(t.td,{children:"OnCollisionWithHitScan"}),(0,l.jsx)(t.td,{})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Scene"}),(0,l.jsx)(t.td,{children:"OnCollisionWithScene"}),(0,l.jsx)(t.td,{children:"OnTriggerWithStaticScene"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Role"}),(0,l.jsx)(t.td,{children:"OnCollisionWithRole"}),(0,l.jsx)(t.td,{children:"OnTriggerWithRole"})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{children:"Default"}),(0,l.jsx)(t.td,{children:"OnCollision"}),(0,l.jsx)(t.td,{children:"OnTrigger"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.RP)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},6376:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/FlyObjLifeCycle-7d18c4fd90a73c3b2126ec7f798aec38.png"},8453:(e,t,n)=>{n.d(t,{RP:()=>s,xA:()=>r});var i=n(6540);const l=i.createContext({});function s(e){const t=i.useContext(l);return i.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}const o={};function r({components:e,children:t,disableParentContext:n}){let r;return r=n?"function"==typeof e?e({}):e||o:s(e),i.createElement(l.Provider,{value:r},t)}},8742:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/FlyState-82bccf4dc95abdcf96a5a8d26d0b3f58.png"}}]);